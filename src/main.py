import sys, os
import xml.etree.ElementTree as et
from pygraph.classes.digraph import digraph

kobj = [
	"process_call", "process", "load_dll", "load_image", "open_file", "open_key", "get_file_attributes", 
	"create_directory", "set_file_attributes", "set_file_time", "create_file", "create_mutex", "query_value", 
	"set_value" "check_for_debugger", "get_system_directory", "create_thread", "create_window", "find_window", 
	"enum_window", "show_window", "destroy_window", "set_windows_hook", "stored_created_file", "vm_protect", 
	"connection", "ping", "find_file"
	]

def xmltree (filename):
	tree = et.parse (filename)
	return tree

def xmlroot (tree):
	root = tree.getroot ()
	return root

def getpid (nodeattr):
	for k, v in nodeattr:
		if k == "pid":
			return v

def getprocnode (g, nodelist, pid):
	for node in nodelist:
		nodeattr = g.node_attributes (node)
		nodepid = getpid (nodeattr)
		if nodepid == pid:
			return node

def getproc (g, node):
	nodelist = g.__iter__()
	nodeattr = node.attrib.items ()
	pid = getpid (nodeattr)
	node = getprocnode (g, nodelist, pid)
	return node

def addnodes (g, root):
	global nodeid
	parent = nodeid
	for child in root:
		if child.tag in kobj:
			if child.tag == "process":
				parent = getproc (g, child)
			attr = [("nodename", child.tag)] + child.attrib.items ()
			nodeid = nodeid + 1
			g.add_node (nodeid, attr)
			g.add_edge ((parent, nodeid))
		addnodes (g, child)

def makeKOBJ (filename):
	if os.path.isfile (filename):
		pass
	else:
		raise IOError ('File does not exists')
	tree = xmltree (filename)
	root = xmlroot (tree)
	g = digraph ()
	attr = [("nodename", root.tag)] + root.attrib.items ()
	global nodeid
	g.add_node (nodeid, attr)
	addnodes (g, root)
	return g

def display (g):
	l = g.nodes ()
	e = g.edges ()
	for node in l:
		print node,
	print
	for edge in e:
		print edge,

def KOBJlist (malwareDir):
	graphList = []
	global nodeid
	nodeid = 1
	for filename in os.listdir (malwareDir):
		filename = malwareDir + "/" + filename
		g = makeKOBJ (filename)
		nodeid = nodeid + 1
		graphList = graphList + [g];
	return graphList

if __name__ == '__main__':
	malwareDir = sys.argv[1]
	if os.path.isdir (malwareDir):
		pass
	else:
		raise IOError ('Directory does not exists')
	glist = KOBJlist (malwareDir)
	for g in glist:
		display (g)
