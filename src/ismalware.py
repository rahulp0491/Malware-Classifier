import sys, os
import xml.etree.ElementTree as et
from pygraph.classes.digraph import digraph
from pygraph.readwrite.dot import *
from mcs import *
from mincs import *
from wcbg import *

# Delta function which ckecks the similarity between wcbg and guest malware kobg
def similarity (wcbg, gnew):
	wcbg_edges = wcbg.edges ()
	gnew_edges = gnew.edges ()
	
	sum = 0
	for e1 in wcbg_edges:
		for e2 in gnew_edges:
			w_node1, w_node2 = e1
			g_node1, g_node2 = e2
			w_node1_attr = wcbg.node_attributes (w_node1)
			w_node2_attr = wcbg.node_attributes (w_node2)
			w_node1_label = w_node1_attr [0][1]
			w_node2_label = w_node2_attr [0][1]
			g_node1_attr = gnew.node_attributes (g_node1)
			g_node2_attr = gnew.node_attributes (g_node2)
			g_node1_label = g_node1_attr [0][1]
			g_node2_label = g_node2_attr [0][1]
			if g_node1_label == w_node1_label and g_node2_label == w_node2_label:
				sum = sum + gnew.edge_weight (e2)
				break
	
	sum = float (sum)
	n = min (len (gnew), len (wcbg))
	if n > 0:
		return sum/n
	else:
		return -1

# Checks if a graph is the subset of other graph
def issubset (hotpath, malware_kobg):
	mcs = mcsinit (hotpath, malware_kobg)
	if len (mcs.nodes ()) == len (hotpath.nodes ()) and len (mcs.edges ()) == len (hotpath.edges ()):
		return True
	else:
		return False

# Final check if malware is of the same family
def isMalware (wcbg, hotpath, malware_kobg, gamma):
	similarity_index = similarity (wcbg, malware_kobg)
	issubset (hotpath, malware_kobg)
	if similarity_index > gamma and issubset (hotpath, malware_kobg):
		return True
	else:
		return False

# Initializes operations on guest malware`
def init_check (hotpath, wcbg, family):
	global nodeid
	nodeid = 1
	malware = sys.argv [3]
	malware_kobg = makeMalGraph (malware)
	malware = malware.split ('.')[0]
	generate_graph_image (malware_kobg, malware) 
	decision = isMalware (wcbg, hotpath, malware_kobg, GAMMA)
	if decision:
		print malware + ' is a Malware of the family ' + family
	else:
		print malware + ' is not a Malware of the family ' + family

# Init function
if __name__ == '__main__':
	wcbg_file = sys.argv [1]
	if os.path.isfile (wcbg_file):
		pass
	else:
		raise IOError ('File does not exists')
	
	f_wcbg = open (wcbg_file, 'r')
	dot_wcbg = f_wcbg.read ()
	f_wcbg.close ()
	wcbg = read (dot_wcbg)
#	print wcbg
	hotpath_file = sys.argv [2]
	if os.path.isfile (hotpath_file):
		pass
	else:
		raise IOError ('File does not exists')
	
	f_hotpath = open (hotpath_file, 'r')
	dot_hotpath = f_hotpath.read ()
	f_hotpath.close ()
	hotpath = read (dot_hotpath)
	family = wcbg_file.split ('.')[0]
	init_check (hotpath, wcbg, family)
